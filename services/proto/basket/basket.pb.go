// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: basket.proto

package basket

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressName string `protobuf:"bytes,1,opt,name=AddressName,proto3" json:"AddressName,omitempty"`
	Longitude   string `protobuf:"bytes,2,opt,name=Longitude,proto3" json:"Longitude,omitempty"`
	Latitude    string `protobuf:"bytes,3,opt,name=Latitude,proto3" json:"Latitude,omitempty"`
	Radius      int32  `protobuf:"varint,4,opt,name=Radius,proto3" json:"Radius,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basket_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_basket_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_basket_proto_rawDescGZIP(), []int{0}
}

func (x *Address) GetAddressName() string {
	if x != nil {
		return x.AddressName
	}
	return ""
}

func (x *Address) GetLongitude() string {
	if x != nil {
		return x.Longitude
	}
	return ""
}

func (x *Address) GetLatitude() string {
	if x != nil {
		return x.Latitude
	}
	return ""
}

func (x *Address) GetRadius() int32 {
	if x != nil {
		return x.Radius
	}
	return 0
}

type DishFromBasket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID     int32  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Price  int32  `protobuf:"varint,3,opt,name=Price,proto3" json:"Price,omitempty"`
	Number int32  `protobuf:"varint,4,opt,name=Number,proto3" json:"Number,omitempty"`
	Image  string `protobuf:"bytes,5,opt,name=Image,proto3" json:"Image,omitempty"`
}

func (x *DishFromBasket) Reset() {
	*x = DishFromBasket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basket_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DishFromBasket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DishFromBasket) ProtoMessage() {}

func (x *DishFromBasket) ProtoReflect() protoreflect.Message {
	mi := &file_basket_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DishFromBasket.ProtoReflect.Descriptor instead.
func (*DishFromBasket) Descriptor() ([]byte, []int) {
	return file_basket_proto_rawDescGZIP(), []int{1}
}

func (x *DishFromBasket) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *DishFromBasket) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DishFromBasket) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *DishFromBasket) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *DishFromBasket) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

type BasketInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bid             int32             `protobuf:"varint,1,opt,name=Bid,proto3" json:"Bid,omitempty"`
	RestaurantName  string            `protobuf:"bytes,2,opt,name=RestaurantName,proto3" json:"RestaurantName,omitempty"`
	RestaurantImage string            `protobuf:"bytes,3,opt,name=RestaurantImage,proto3" json:"RestaurantImage,omitempty"`
	Rid             int32             `protobuf:"varint,4,opt,name=Rid,proto3" json:"Rid,omitempty"`
	DeliveryCost    int32             `protobuf:"varint,5,opt,name=DeliveryCost,proto3" json:"DeliveryCost,omitempty"`
	Summary         int32             `protobuf:"varint,6,opt,name=Summary,proto3" json:"Summary,omitempty"`
	Dishes          []*DishFromBasket `protobuf:"bytes,7,rep,name=Dishes,proto3" json:"Dishes,omitempty"`
	Address         *Address          `protobuf:"bytes,8,opt,name=Address,proto3" json:"Address,omitempty"`
	Uid             int32             `protobuf:"varint,9,opt,name=Uid,proto3" json:"Uid,omitempty"`
}

func (x *BasketInfo) Reset() {
	*x = BasketInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basket_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasketInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasketInfo) ProtoMessage() {}

func (x *BasketInfo) ProtoReflect() protoreflect.Message {
	mi := &file_basket_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasketInfo.ProtoReflect.Descriptor instead.
func (*BasketInfo) Descriptor() ([]byte, []int) {
	return file_basket_proto_rawDescGZIP(), []int{2}
}

func (x *BasketInfo) GetBid() int32 {
	if x != nil {
		return x.Bid
	}
	return 0
}

func (x *BasketInfo) GetRestaurantName() string {
	if x != nil {
		return x.RestaurantName
	}
	return ""
}

func (x *BasketInfo) GetRestaurantImage() string {
	if x != nil {
		return x.RestaurantImage
	}
	return ""
}

func (x *BasketInfo) GetRid() int32 {
	if x != nil {
		return x.Rid
	}
	return 0
}

func (x *BasketInfo) GetDeliveryCost() int32 {
	if x != nil {
		return x.DeliveryCost
	}
	return 0
}

func (x *BasketInfo) GetSummary() int32 {
	if x != nil {
		return x.Summary
	}
	return 0
}

func (x *BasketInfo) GetDishes() []*DishFromBasket {
	if x != nil {
		return x.Dishes
	}
	return nil
}

func (x *BasketInfo) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *BasketInfo) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type Baskets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Baskets []*BasketInfo `protobuf:"bytes,1,rep,name=Baskets,proto3" json:"Baskets,omitempty"`
}

func (x *Baskets) Reset() {
	*x = Baskets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basket_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Baskets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Baskets) ProtoMessage() {}

func (x *Baskets) ProtoReflect() protoreflect.Message {
	mi := &file_basket_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Baskets.ProtoReflect.Descriptor instead.
func (*Baskets) Descriptor() ([]byte, []int) {
	return file_basket_proto_rawDescGZIP(), []int{3}
}

func (x *Baskets) GetBaskets() []*BasketInfo {
	if x != nil {
		return x.Baskets
	}
	return nil
}

type UserRestaurantBasket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID       int32 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	RestaurantID int32 `protobuf:"varint,2,opt,name=RestaurantID,proto3" json:"RestaurantID,omitempty"`
}

func (x *UserRestaurantBasket) Reset() {
	*x = UserRestaurantBasket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basket_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRestaurantBasket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRestaurantBasket) ProtoMessage() {}

func (x *UserRestaurantBasket) ProtoReflect() protoreflect.Message {
	mi := &file_basket_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRestaurantBasket.ProtoReflect.Descriptor instead.
func (*UserRestaurantBasket) Descriptor() ([]byte, []int) {
	return file_basket_proto_rawDescGZIP(), []int{4}
}

func (x *UserRestaurantBasket) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UserRestaurantBasket) GetRestaurantID() int32 {
	if x != nil {
		return x.RestaurantID
	}
	return 0
}

type IDs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Rid int32 `protobuf:"varint,2,opt,name=rid,proto3" json:"rid,omitempty"`
}

func (x *IDs) Reset() {
	*x = IDs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basket_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDs) ProtoMessage() {}

func (x *IDs) ProtoReflect() protoreflect.Message {
	mi := &file_basket_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDs.ProtoReflect.Descriptor instead.
func (*IDs) Descriptor() ([]byte, []int) {
	return file_basket_proto_rawDescGZIP(), []int{5}
}

func (x *IDs) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *IDs) GetRid() int32 {
	if x != nil {
		return x.Rid
	}
	return 0
}

type UID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *UID) Reset() {
	*x = UID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basket_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UID) ProtoMessage() {}

func (x *UID) ProtoReflect() protoreflect.Message {
	mi := &file_basket_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UID.ProtoReflect.Descriptor instead.
func (*UID) Descriptor() ([]byte, []int) {
	return file_basket_proto_rawDescGZIP(), []int{6}
}

func (x *UID) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type BID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bid int32 `protobuf:"varint,1,opt,name=bid,proto3" json:"bid,omitempty"`
}

func (x *BID) Reset() {
	*x = BID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basket_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BID) ProtoMessage() {}

func (x *BID) ProtoReflect() protoreflect.Message {
	mi := &file_basket_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BID.ProtoReflect.Descriptor instead.
func (*BID) Descriptor() ([]byte, []int) {
	return file_basket_proto_rawDescGZIP(), []int{7}
}

func (x *BID) GetBid() int32 {
	if x != nil {
		return x.Bid
	}
	return 0
}

type GetBasketsParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       int32  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Latitude  string `protobuf:"bytes,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude string `protobuf:"bytes,3,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *GetBasketsParams) Reset() {
	*x = GetBasketsParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basket_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBasketsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBasketsParams) ProtoMessage() {}

func (x *GetBasketsParams) ProtoReflect() protoreflect.Message {
	mi := &file_basket_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBasketsParams.ProtoReflect.Descriptor instead.
func (*GetBasketsParams) Descriptor() ([]byte, []int) {
	return file_basket_proto_rawDescGZIP(), []int{8}
}

func (x *GetBasketsParams) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *GetBasketsParams) GetLatitude() string {
	if x != nil {
		return x.Latitude
	}
	return ""
}

func (x *GetBasketsParams) GetLongitude() string {
	if x != nil {
		return x.Longitude
	}
	return ""
}

type DishToBasket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        int32 `protobuf:"varint,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
	Did        int32 `protobuf:"varint,2,opt,name=Did,proto3" json:"Did,omitempty"`
	IsPlus     bool  `protobuf:"varint,3,opt,name=IsPlus,proto3" json:"IsPlus,omitempty"`
	SameBasket bool  `protobuf:"varint,4,opt,name=SameBasket,proto3" json:"SameBasket,omitempty"`
	Rid        int32 `protobuf:"varint,5,opt,name=Rid,proto3" json:"Rid,omitempty"`
}

func (x *DishToBasket) Reset() {
	*x = DishToBasket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basket_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DishToBasket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DishToBasket) ProtoMessage() {}

func (x *DishToBasket) ProtoReflect() protoreflect.Message {
	mi := &file_basket_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DishToBasket.ProtoReflect.Descriptor instead.
func (*DishToBasket) Descriptor() ([]byte, []int) {
	return file_basket_proto_rawDescGZIP(), []int{9}
}

func (x *DishToBasket) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *DishToBasket) GetDid() int32 {
	if x != nil {
		return x.Did
	}
	return 0
}

func (x *DishToBasket) GetIsPlus() bool {
	if x != nil {
		return x.IsPlus
	}
	return false
}

func (x *DishToBasket) GetSameBasket() bool {
	if x != nil {
		return x.SameBasket
	}
	return false
}

func (x *DishToBasket) GetRid() int32 {
	if x != nil {
		return x.Rid
	}
	return 0
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err string `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basket_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_basket_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_basket_proto_rawDescGZIP(), []int{10}
}

func (x *Error) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type Nothing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Nothing) Reset() {
	*x = Nothing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basket_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nothing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nothing) ProtoMessage() {}

func (x *Nothing) ProtoReflect() protoreflect.Message {
	mi := &file_basket_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nothing.ProtoReflect.Descriptor instead.
func (*Nothing) Descriptor() ([]byte, []int) {
	return file_basket_proto_rawDescGZIP(), []int{11}
}

var File_basket_proto protoreflect.FileDescriptor

var file_basket_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x22, 0x7d, 0x0a, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x22, 0x78, 0x0a, 0x0e, 0x44, 0x69,
	0x73, 0x68, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x22, 0xb7, 0x02, 0x0a, 0x0a, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x42, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72,
	0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x52,
	0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x52, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x52, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61,
	0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x52, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x68, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x68, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x61,
	0x73, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x44, 0x69, 0x73, 0x68, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x07,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x55, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x55, 0x69, 0x64, 0x22, 0x3c,
	0x0a, 0x07, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x42, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x73, 0x22, 0x52, 0x0a, 0x14,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x42, 0x61,
	0x73, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x49, 0x44,
	0x22, 0x29, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x69, 0x64, 0x22, 0x17, 0x0a, 0x03, 0x55,
	0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x22, 0x17, 0x0a, 0x03, 0x42, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x62,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x62, 0x69, 0x64, 0x22, 0x5e, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0x7c, 0x0a,
	0x0c, 0x44, 0x69, 0x73, 0x68, 0x54, 0x6f, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x55, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x44, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x44, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x50, 0x6c, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x49, 0x73, 0x50, 0x6c, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x61, 0x6d,
	0x65, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x53,
	0x61, 0x6d, 0x65, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x52, 0x69, 0x64, 0x22, 0x19, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x09, 0x0a, 0x07, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e,
	0x67, 0x32, 0xb3, 0x03, 0x0a, 0x06, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x12, 0x3e, 0x0a, 0x0b,
	0x41, 0x64, 0x64, 0x54, 0x6f, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x68, 0x54, 0x6f,
	0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x61,
	0x73, 0x6b, 0x65, 0x74, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x10,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74,
	0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x2e, 0x44,
	0x69, 0x73, 0x68, 0x54, 0x6f, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e,
	0x67, 0x12, 0x36, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x12, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x2e, 0x49, 0x44, 0x73,
	0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x2e, 0x42,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x73,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x61,
	0x73, 0x6b, 0x65, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0a,
	0x41, 0x64, 0x64, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x73,
	0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x2e, 0x42,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x2e, 0x55, 0x49, 0x44, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x12,
	0x36, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x12,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x2e, 0x42, 0x49,
	0x44, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x2e,
	0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x6f, 0x72, 0x73, 0x63, 0x68, 0x74, 0x2f, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_basket_proto_rawDescOnce sync.Once
	file_basket_proto_rawDescData = file_basket_proto_rawDesc
)

func file_basket_proto_rawDescGZIP() []byte {
	file_basket_proto_rawDescOnce.Do(func() {
		file_basket_proto_rawDescData = protoimpl.X.CompressGZIP(file_basket_proto_rawDescData)
	})
	return file_basket_proto_rawDescData
}

var file_basket_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_basket_proto_goTypes = []interface{}{
	(*Address)(nil),              // 0: protoBasket.Address
	(*DishFromBasket)(nil),       // 1: protoBasket.DishFromBasket
	(*BasketInfo)(nil),           // 2: protoBasket.BasketInfo
	(*Baskets)(nil),              // 3: protoBasket.Baskets
	(*UserRestaurantBasket)(nil), // 4: protoBasket.UserRestaurantBasket
	(*IDs)(nil),                  // 5: protoBasket.IDs
	(*UID)(nil),                  // 6: protoBasket.UID
	(*BID)(nil),                  // 7: protoBasket.BID
	(*GetBasketsParams)(nil),     // 8: protoBasket.GetBasketsParams
	(*DishToBasket)(nil),         // 9: protoBasket.DishToBasket
	(*Error)(nil),                // 10: protoBasket.Error
	(*Nothing)(nil),              // 11: protoBasket.Nothing
}
var file_basket_proto_depIdxs = []int32{
	1,  // 0: protoBasket.BasketInfo.Dishes:type_name -> protoBasket.DishFromBasket
	0,  // 1: protoBasket.BasketInfo.Address:type_name -> protoBasket.Address
	2,  // 2: protoBasket.Baskets.Baskets:type_name -> protoBasket.BasketInfo
	9,  // 3: protoBasket.Basket.AddToBasket:input_type -> protoBasket.DishToBasket
	9,  // 4: protoBasket.Basket.DeleteFromBasket:input_type -> protoBasket.DishToBasket
	5,  // 5: protoBasket.Basket.GetBasket:input_type -> protoBasket.IDs
	8,  // 6: protoBasket.Basket.GetBaskets:input_type -> protoBasket.GetBasketsParams
	3,  // 7: protoBasket.Basket.AddBaskets:input_type -> protoBasket.Baskets
	6,  // 8: protoBasket.Basket.DeleteBaskets:input_type -> protoBasket.UID
	7,  // 9: protoBasket.Basket.DeleteBasket:input_type -> protoBasket.BID
	11, // 10: protoBasket.Basket.AddToBasket:output_type -> protoBasket.Nothing
	11, // 11: protoBasket.Basket.DeleteFromBasket:output_type -> protoBasket.Nothing
	2,  // 12: protoBasket.Basket.GetBasket:output_type -> protoBasket.BasketInfo
	3,  // 13: protoBasket.Basket.GetBaskets:output_type -> protoBasket.Baskets
	3,  // 14: protoBasket.Basket.AddBaskets:output_type -> protoBasket.Baskets
	11, // 15: protoBasket.Basket.DeleteBaskets:output_type -> protoBasket.Nothing
	11, // 16: protoBasket.Basket.DeleteBasket:output_type -> protoBasket.Nothing
	10, // [10:17] is the sub-list for method output_type
	3,  // [3:10] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_basket_proto_init() }
func file_basket_proto_init() {
	if File_basket_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_basket_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basket_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DishFromBasket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basket_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasketInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basket_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Baskets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basket_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRestaurantBasket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basket_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basket_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basket_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basket_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBasketsParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basket_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DishToBasket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basket_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basket_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nothing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_basket_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_basket_proto_goTypes,
		DependencyIndexes: file_basket_proto_depIdxs,
		MessageInfos:      file_basket_proto_msgTypes,
	}.Build()
	File_basket_proto = out.File
	file_basket_proto_rawDesc = nil
	file_basket_proto_goTypes = nil
	file_basket_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BasketClient is the client API for Basket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BasketClient interface {
	AddToBasket(ctx context.Context, in *DishToBasket, opts ...grpc.CallOption) (*Nothing, error)
	DeleteFromBasket(ctx context.Context, in *DishToBasket, opts ...grpc.CallOption) (*Nothing, error)
	GetBasket(ctx context.Context, in *IDs, opts ...grpc.CallOption) (*BasketInfo, error)
	GetBaskets(ctx context.Context, in *GetBasketsParams, opts ...grpc.CallOption) (*Baskets, error)
	AddBaskets(ctx context.Context, in *Baskets, opts ...grpc.CallOption) (*Baskets, error)
	DeleteBaskets(ctx context.Context, in *UID, opts ...grpc.CallOption) (*Nothing, error)
	DeleteBasket(ctx context.Context, in *BID, opts ...grpc.CallOption) (*Nothing, error)
}

type basketClient struct {
	cc grpc.ClientConnInterface
}

func NewBasketClient(cc grpc.ClientConnInterface) BasketClient {
	return &basketClient{cc}
}

func (c *basketClient) AddToBasket(ctx context.Context, in *DishToBasket, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/protoBasket.Basket/AddToBasket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketClient) DeleteFromBasket(ctx context.Context, in *DishToBasket, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/protoBasket.Basket/DeleteFromBasket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketClient) GetBasket(ctx context.Context, in *IDs, opts ...grpc.CallOption) (*BasketInfo, error) {
	out := new(BasketInfo)
	err := c.cc.Invoke(ctx, "/protoBasket.Basket/GetBasket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketClient) GetBaskets(ctx context.Context, in *GetBasketsParams, opts ...grpc.CallOption) (*Baskets, error) {
	out := new(Baskets)
	err := c.cc.Invoke(ctx, "/protoBasket.Basket/GetBaskets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketClient) AddBaskets(ctx context.Context, in *Baskets, opts ...grpc.CallOption) (*Baskets, error) {
	out := new(Baskets)
	err := c.cc.Invoke(ctx, "/protoBasket.Basket/AddBaskets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketClient) DeleteBaskets(ctx context.Context, in *UID, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/protoBasket.Basket/DeleteBaskets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketClient) DeleteBasket(ctx context.Context, in *BID, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/protoBasket.Basket/DeleteBasket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasketServer is the server API for Basket service.
type BasketServer interface {
	AddToBasket(context.Context, *DishToBasket) (*Nothing, error)
	DeleteFromBasket(context.Context, *DishToBasket) (*Nothing, error)
	GetBasket(context.Context, *IDs) (*BasketInfo, error)
	GetBaskets(context.Context, *GetBasketsParams) (*Baskets, error)
	AddBaskets(context.Context, *Baskets) (*Baskets, error)
	DeleteBaskets(context.Context, *UID) (*Nothing, error)
	DeleteBasket(context.Context, *BID) (*Nothing, error)
}

// UnimplementedBasketServer can be embedded to have forward compatible implementations.
type UnimplementedBasketServer struct {
}

func (*UnimplementedBasketServer) AddToBasket(context.Context, *DishToBasket) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToBasket not implemented")
}
func (*UnimplementedBasketServer) DeleteFromBasket(context.Context, *DishToBasket) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFromBasket not implemented")
}
func (*UnimplementedBasketServer) GetBasket(context.Context, *IDs) (*BasketInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasket not implemented")
}
func (*UnimplementedBasketServer) GetBaskets(context.Context, *GetBasketsParams) (*Baskets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBaskets not implemented")
}
func (*UnimplementedBasketServer) AddBaskets(context.Context, *Baskets) (*Baskets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBaskets not implemented")
}
func (*UnimplementedBasketServer) DeleteBaskets(context.Context, *UID) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBaskets not implemented")
}
func (*UnimplementedBasketServer) DeleteBasket(context.Context, *BID) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBasket not implemented")
}

func RegisterBasketServer(s *grpc.Server, srv BasketServer) {
	s.RegisterService(&_Basket_serviceDesc, srv)
}

func _Basket_AddToBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DishToBasket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServer).AddToBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBasket.Basket/AddToBasket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServer).AddToBasket(ctx, req.(*DishToBasket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basket_DeleteFromBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DishToBasket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServer).DeleteFromBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBasket.Basket/DeleteFromBasket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServer).DeleteFromBasket(ctx, req.(*DishToBasket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basket_GetBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServer).GetBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBasket.Basket/GetBasket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServer).GetBasket(ctx, req.(*IDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basket_GetBaskets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBasketsParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServer).GetBaskets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBasket.Basket/GetBaskets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServer).GetBaskets(ctx, req.(*GetBasketsParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basket_AddBaskets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Baskets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServer).AddBaskets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBasket.Basket/AddBaskets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServer).AddBaskets(ctx, req.(*Baskets))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basket_DeleteBaskets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServer).DeleteBaskets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBasket.Basket/DeleteBaskets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServer).DeleteBaskets(ctx, req.(*UID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basket_DeleteBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServer).DeleteBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBasket.Basket/DeleteBasket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServer).DeleteBasket(ctx, req.(*BID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Basket_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protoBasket.Basket",
	HandlerType: (*BasketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToBasket",
			Handler:    _Basket_AddToBasket_Handler,
		},
		{
			MethodName: "DeleteFromBasket",
			Handler:    _Basket_DeleteFromBasket_Handler,
		},
		{
			MethodName: "GetBasket",
			Handler:    _Basket_GetBasket_Handler,
		},
		{
			MethodName: "GetBaskets",
			Handler:    _Basket_GetBaskets_Handler,
		},
		{
			MethodName: "AddBaskets",
			Handler:    _Basket_AddBaskets_Handler,
		},
		{
			MethodName: "DeleteBaskets",
			Handler:    _Basket_DeleteBaskets_Handler,
		},
		{
			MethodName: "DeleteBasket",
			Handler:    _Basket_DeleteBasket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "basket.proto",
}
