// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/borscht/backend/internal/session (interfaces: SessionUsecase)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "github.com/borscht/backend/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSessionUsecase is a mock of SessionUsecase interface
type MockSessionUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockSessionUsecaseMockRecorder
}

// MockSessionUsecaseMockRecorder is the mock recorder for MockSessionUsecase
type MockSessionUsecaseMockRecorder struct {
	mock *MockSessionUsecase
}

// NewMockSessionUsecase creates a new mock instance
func NewMockSessionUsecase(ctrl *gomock.Controller) *MockSessionUsecase {
	mock := &MockSessionUsecase{ctrl: ctrl}
	mock.recorder = &MockSessionUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionUsecase) EXPECT() *MockSessionUsecaseMockRecorder {
	return m.recorder
}

// Check mocks base method
func (m *MockSessionUsecase) Check(arg0 context.Context, arg1 string) (models.SessionInfo, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", arg0, arg1)
	ret0, _ := ret[0].(models.SessionInfo)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Check indicates an expected call of Check
func (mr *MockSessionUsecaseMockRecorder) Check(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockSessionUsecase)(nil).Check), arg0, arg1)
}

// Create mocks base method
func (m *MockSessionUsecase) Create(arg0 context.Context, arg1 models.SessionInfo) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockSessionUsecaseMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSessionUsecase)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockSessionUsecase) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockSessionUsecaseMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSessionUsecase)(nil).Delete), arg0, arg1)
}
