// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/borscht/backend/services/auth (interfaces: RestaurantAuthRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "github.com/borscht/backend/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRestaurantAuthRepo is a mock of RestaurantAuthRepo interface
type MockRestaurantAuthRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRestaurantAuthRepoMockRecorder
}

// MockRestaurantAuthRepoMockRecorder is the mock recorder for MockRestaurantAuthRepo
type MockRestaurantAuthRepoMockRecorder struct {
	mock *MockRestaurantAuthRepo
}

// NewMockRestaurantAuthRepo creates a new mock instance
func NewMockRestaurantAuthRepo(ctrl *gomock.Controller) *MockRestaurantAuthRepo {
	mock := &MockRestaurantAuthRepo{ctrl: ctrl}
	mock.recorder = &MockRestaurantAuthRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRestaurantAuthRepo) EXPECT() *MockRestaurantAuthRepoMockRecorder {
	return m.recorder
}

// CreateRestaurant mocks base method
func (m *MockRestaurantAuthRepo) CreateRestaurant(arg0 context.Context, arg1 models.RestaurantInfo) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRestaurant", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRestaurant indicates an expected call of CreateRestaurant
func (mr *MockRestaurantAuthRepoMockRecorder) CreateRestaurant(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRestaurant", reflect.TypeOf((*MockRestaurantAuthRepo)(nil).CreateRestaurant), arg0, arg1)
}

// GetAddress mocks base method
func (m *MockRestaurantAuthRepo) GetAddress(arg0 context.Context, arg1 int) (*models.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress", arg0, arg1)
	ret0, _ := ret[0].(*models.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddress indicates an expected call of GetAddress
func (mr *MockRestaurantAuthRepoMockRecorder) GetAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockRestaurantAuthRepo)(nil).GetAddress), arg0, arg1)
}

// GetByLogin mocks base method
func (m *MockRestaurantAuthRepo) GetByLogin(arg0 context.Context, arg1 string) (*models.RestaurantInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLogin", arg0, arg1)
	ret0, _ := ret[0].(*models.RestaurantInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLogin indicates an expected call of GetByLogin
func (mr *MockRestaurantAuthRepoMockRecorder) GetByLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLogin", reflect.TypeOf((*MockRestaurantAuthRepo)(nil).GetByLogin), arg0, arg1)
}

// GetByRid mocks base method
func (m *MockRestaurantAuthRepo) GetByRid(arg0 context.Context, arg1 int) (*models.RestaurantInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByRid", arg0, arg1)
	ret0, _ := ret[0].(*models.RestaurantInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRid indicates an expected call of GetByRid
func (mr *MockRestaurantAuthRepoMockRecorder) GetByRid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRid", reflect.TypeOf((*MockRestaurantAuthRepo)(nil).GetByRid), arg0, arg1)
}
