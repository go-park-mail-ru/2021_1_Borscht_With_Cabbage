// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/borscht/backend/services/proto/auth (interfaces: AuthClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	auth "github.com/borscht/backend/services/proto/auth"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockAuthClient is a mock of AuthClient interface
type MockAuthClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthClientMockRecorder
}

// MockAuthClientMockRecorder is the mock recorder for MockAuthClient
type MockAuthClientMockRecorder struct {
	mock *MockAuthClient
}

// NewMockAuthClient creates a new mock instance
func NewMockAuthClient(ctrl *gomock.Controller) *MockAuthClient {
	mock := &MockAuthClient{ctrl: ctrl}
	mock.recorder = &MockAuthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthClient) EXPECT() *MockAuthClientMockRecorder {
	return m.recorder
}

// CheckKey mocks base method
func (m *MockAuthClient) CheckKey(arg0 context.Context, arg1 *auth.SessionValue, arg2 ...grpc.CallOption) (*auth.SessionInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckKey", varargs...)
	ret0, _ := ret[0].(*auth.SessionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckKey indicates an expected call of CheckKey
func (mr *MockAuthClientMockRecorder) CheckKey(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckKey", reflect.TypeOf((*MockAuthClient)(nil).CheckKey), varargs...)
}

// CheckRestaurantExists mocks base method
func (m *MockAuthClient) CheckRestaurantExists(arg0 context.Context, arg1 *auth.UserAuth, arg2 ...grpc.CallOption) (*auth.SuccessRestaurantResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckRestaurantExists", varargs...)
	ret0, _ := ret[0].(*auth.SuccessRestaurantResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRestaurantExists indicates an expected call of CheckRestaurantExists
func (mr *MockAuthClientMockRecorder) CheckRestaurantExists(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRestaurantExists", reflect.TypeOf((*MockAuthClient)(nil).CheckRestaurantExists), varargs...)
}

// CheckSession mocks base method
func (m *MockAuthClient) CheckSession(arg0 context.Context, arg1 *auth.SessionValue, arg2 ...grpc.CallOption) (*auth.SessionInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckSession", varargs...)
	ret0, _ := ret[0].(*auth.SessionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckSession indicates an expected call of CheckSession
func (mr *MockAuthClientMockRecorder) CheckSession(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSession", reflect.TypeOf((*MockAuthClient)(nil).CheckSession), varargs...)
}

// CheckUserExists mocks base method
func (m *MockAuthClient) CheckUserExists(arg0 context.Context, arg1 *auth.UserAuth, arg2 ...grpc.CallOption) (*auth.SuccessUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckUserExists", varargs...)
	ret0, _ := ret[0].(*auth.SuccessUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserExists indicates an expected call of CheckUserExists
func (mr *MockAuthClientMockRecorder) CheckUserExists(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserExists", reflect.TypeOf((*MockAuthClient)(nil).CheckUserExists), varargs...)
}

// CreateKey mocks base method
func (m *MockAuthClient) CreateKey(arg0 context.Context, arg1 *auth.SessionInfo, arg2 ...grpc.CallOption) (*auth.SessionValue, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateKey", varargs...)
	ret0, _ := ret[0].(*auth.SessionValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKey indicates an expected call of CreateKey
func (mr *MockAuthClientMockRecorder) CreateKey(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKey", reflect.TypeOf((*MockAuthClient)(nil).CreateKey), varargs...)
}

// CreateRestaurant mocks base method
func (m *MockAuthClient) CreateRestaurant(arg0 context.Context, arg1 *auth.User, arg2 ...grpc.CallOption) (*auth.SuccessRestaurantResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRestaurant", varargs...)
	ret0, _ := ret[0].(*auth.SuccessRestaurantResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRestaurant indicates an expected call of CreateRestaurant
func (mr *MockAuthClientMockRecorder) CreateRestaurant(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRestaurant", reflect.TypeOf((*MockAuthClient)(nil).CreateRestaurant), varargs...)
}

// CreateSession mocks base method
func (m *MockAuthClient) CreateSession(arg0 context.Context, arg1 *auth.SessionInfo, arg2 ...grpc.CallOption) (*auth.SessionValue, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSession", varargs...)
	ret0, _ := ret[0].(*auth.SessionValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession
func (mr *MockAuthClientMockRecorder) CreateSession(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockAuthClient)(nil).CreateSession), varargs...)
}

// CreateUser mocks base method
func (m *MockAuthClient) CreateUser(arg0 context.Context, arg1 *auth.User, arg2 ...grpc.CallOption) (*auth.SuccessUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUser", varargs...)
	ret0, _ := ret[0].(*auth.SuccessUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockAuthClientMockRecorder) CreateUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthClient)(nil).CreateUser), varargs...)
}

// DeleteSession mocks base method
func (m *MockAuthClient) DeleteSession(arg0 context.Context, arg1 *auth.SessionValue, arg2 ...grpc.CallOption) (*auth.Error, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSession", varargs...)
	ret0, _ := ret[0].(*auth.Error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSession indicates an expected call of DeleteSession
func (mr *MockAuthClientMockRecorder) DeleteSession(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockAuthClient)(nil).DeleteSession), varargs...)
}

// GetByRid mocks base method
func (m *MockAuthClient) GetByRid(arg0 context.Context, arg1 *auth.RID, arg2 ...grpc.CallOption) (*auth.SuccessRestaurantResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByRid", varargs...)
	ret0, _ := ret[0].(*auth.SuccessRestaurantResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRid indicates an expected call of GetByRid
func (mr *MockAuthClientMockRecorder) GetByRid(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRid", reflect.TypeOf((*MockAuthClient)(nil).GetByRid), varargs...)
}

// GetByUid mocks base method
func (m *MockAuthClient) GetByUid(arg0 context.Context, arg1 *auth.UID, arg2 ...grpc.CallOption) (*auth.SuccessUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByUid", varargs...)
	ret0, _ := ret[0].(*auth.SuccessUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUid indicates an expected call of GetByUid
func (mr *MockAuthClientMockRecorder) GetByUid(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUid", reflect.TypeOf((*MockAuthClient)(nil).GetByUid), varargs...)
}
