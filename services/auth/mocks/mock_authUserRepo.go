// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/borscht/backend/services/auth (interfaces: UserAuthRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "github.com/borscht/backend/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserAuthRepo is a mock of UserAuthRepo interface
type MockUserAuthRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserAuthRepoMockRecorder
}

// MockUserAuthRepoMockRecorder is the mock recorder for MockUserAuthRepo
type MockUserAuthRepoMockRecorder struct {
	mock *MockUserAuthRepo
}

// NewMockUserAuthRepo creates a new mock instance
func NewMockUserAuthRepo(ctrl *gomock.Controller) *MockUserAuthRepo {
	mock := &MockUserAuthRepo{ctrl: ctrl}
	mock.recorder = &MockUserAuthRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserAuthRepo) EXPECT() *MockUserAuthRepoMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockUserAuthRepo) Create(arg0 context.Context, arg1 models.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockUserAuthRepoMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserAuthRepo)(nil).Create), arg0, arg1)
}

// GetAddress mocks base method
func (m *MockUserAuthRepo) GetAddress(arg0 context.Context, arg1 int) (*models.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress", arg0, arg1)
	ret0, _ := ret[0].(*models.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddress indicates an expected call of GetAddress
func (mr *MockUserAuthRepoMockRecorder) GetAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockUserAuthRepo)(nil).GetAddress), arg0, arg1)
}

// GetByLogin mocks base method
func (m *MockUserAuthRepo) GetByLogin(arg0 context.Context, arg1 string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLogin", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLogin indicates an expected call of GetByLogin
func (mr *MockUserAuthRepoMockRecorder) GetByLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLogin", reflect.TypeOf((*MockUserAuthRepo)(nil).GetByLogin), arg0, arg1)
}

// GetByUid mocks base method
func (m *MockUserAuthRepo) GetByUid(arg0 context.Context, arg1 int) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUid", arg0, arg1)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUid indicates an expected call of GetByUid
func (mr *MockUserAuthRepoMockRecorder) GetByUid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUid", reflect.TypeOf((*MockUserAuthRepo)(nil).GetByUid), arg0, arg1)
}
