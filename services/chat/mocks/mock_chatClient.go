// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/borscht/backend/services/proto/chat (interfaces: ChatClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	chat "github.com/borscht/backend/services/proto/chat"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockChatClient is a mock of ChatClient interface
type MockChatClient struct {
	ctrl     *gomock.Controller
	recorder *MockChatClientMockRecorder
}

// MockChatClientMockRecorder is the mock recorder for MockChatClient
type MockChatClientMockRecorder struct {
	mock *MockChatClient
}

// NewMockChatClient creates a new mock instance
func NewMockChatClient(ctrl *gomock.Controller) *MockChatClient {
	mock := &MockChatClient{ctrl: ctrl}
	mock.recorder = &MockChatClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChatClient) EXPECT() *MockChatClientMockRecorder {
	return m.recorder
}

// GetAllChats mocks base method
func (m *MockChatClient) GetAllChats(arg0 context.Context, arg1 *chat.InfoUser, arg2 ...grpc.CallOption) (*chat.MoreInfoMessage, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllChats", varargs...)
	ret0, _ := ret[0].(*chat.MoreInfoMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllChats indicates an expected call of GetAllChats
func (mr *MockChatClientMockRecorder) GetAllChats(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllChats", reflect.TypeOf((*MockChatClient)(nil).GetAllChats), varargs...)
}

// GetAllMessages mocks base method
func (m *MockChatClient) GetAllMessages(arg0 context.Context, arg1 *chat.Speakers, arg2 ...grpc.CallOption) (*chat.MoreInfoMessage, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllMessages", varargs...)
	ret0, _ := ret[0].(*chat.MoreInfoMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMessages indicates an expected call of GetAllMessages
func (mr *MockChatClientMockRecorder) GetAllMessages(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMessages", reflect.TypeOf((*MockChatClient)(nil).GetAllMessages), varargs...)
}

// ProcessMessage mocks base method
func (m *MockChatClient) ProcessMessage(arg0 context.Context, arg1 *chat.InfoMessage, arg2 ...grpc.CallOption) (*chat.InfoMessage, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProcessMessage", varargs...)
	ret0, _ := ret[0].(*chat.InfoMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessMessage indicates an expected call of ProcessMessage
func (mr *MockChatClientMockRecorder) ProcessMessage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessMessage", reflect.TypeOf((*MockChatClient)(nil).ProcessMessage), varargs...)
}
