// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/borscht/backend/services/chat/repository (interfaces: ChatRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "github.com/borscht/backend/services/chat/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockChatRepo is a mock of ChatRepo interface
type MockChatRepo struct {
	ctrl     *gomock.Controller
	recorder *MockChatRepoMockRecorder
}

// MockChatRepoMockRecorder is the mock recorder for MockChatRepo
type MockChatRepoMockRecorder struct {
	mock *MockChatRepo
}

// NewMockChatRepo creates a new mock instance
func NewMockChatRepo(ctrl *gomock.Controller) *MockChatRepo {
	mock := &MockChatRepo{ctrl: ctrl}
	mock.recorder = &MockChatRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChatRepo) EXPECT() *MockChatRepoMockRecorder {
	return m.recorder
}

// GetAllChats mocks base method
func (m *MockChatRepo) GetAllChats(arg0 context.Context, arg1 models.User) ([]models.ChatInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllChats", arg0, arg1)
	ret0, _ := ret[0].([]models.ChatInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllChats indicates an expected call of GetAllChats
func (mr *MockChatRepoMockRecorder) GetAllChats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllChats", reflect.TypeOf((*MockChatRepo)(nil).GetAllChats), arg0, arg1)
}

// GetAllMessages mocks base method
func (m *MockChatRepo) GetAllMessages(arg0 context.Context, arg1, arg2 models.User) ([]models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMessages", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMessages indicates an expected call of GetAllMessages
func (mr *MockChatRepoMockRecorder) GetAllMessages(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMessages", reflect.TypeOf((*MockChatRepo)(nil).GetAllMessages), arg0, arg1, arg2)
}

// SaveMessage mocks base method
func (m *MockChatRepo) SaveMessage(arg0 context.Context, arg1 models.Chat) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMessage", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveMessage indicates an expected call of SaveMessage
func (mr *MockChatRepoMockRecorder) SaveMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMessage", reflect.TypeOf((*MockChatRepo)(nil).SaveMessage), arg0, arg1)
}
