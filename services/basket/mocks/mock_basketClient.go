// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/borscht/backend/services/proto/basket (interfaces: BasketClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	basket "github.com/borscht/backend/services/proto/basket"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockBasketClient is a mock of BasketClient interface
type MockBasketClient struct {
	ctrl     *gomock.Controller
	recorder *MockBasketClientMockRecorder
}

// MockBasketClientMockRecorder is the mock recorder for MockBasketClient
type MockBasketClientMockRecorder struct {
	mock *MockBasketClient
}

// NewMockBasketClient creates a new mock instance
func NewMockBasketClient(ctrl *gomock.Controller) *MockBasketClient {
	mock := &MockBasketClient{ctrl: ctrl}
	mock.recorder = &MockBasketClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBasketClient) EXPECT() *MockBasketClientMockRecorder {
	return m.recorder
}

// AddBasket mocks base method
func (m *MockBasketClient) AddBasket(arg0 context.Context, arg1 *basket.BasketInfo, arg2 ...grpc.CallOption) (*basket.BasketInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddBasket", varargs...)
	ret0, _ := ret[0].(*basket.BasketInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBasket indicates an expected call of AddBasket
func (mr *MockBasketClientMockRecorder) AddBasket(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBasket", reflect.TypeOf((*MockBasketClient)(nil).AddBasket), varargs...)
}

// AddToBasket mocks base method
func (m *MockBasketClient) AddToBasket(arg0 context.Context, arg1 *basket.DishToBasket, arg2 ...grpc.CallOption) (*basket.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddToBasket", varargs...)
	ret0, _ := ret[0].(*basket.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddToBasket indicates an expected call of AddToBasket
func (mr *MockBasketClientMockRecorder) AddToBasket(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToBasket", reflect.TypeOf((*MockBasketClient)(nil).AddToBasket), varargs...)
}

// DeleteFromBasket mocks base method
func (m *MockBasketClient) DeleteFromBasket(arg0 context.Context, arg1 *basket.DishToBasket, arg2 ...grpc.CallOption) (*basket.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFromBasket", varargs...)
	ret0, _ := ret[0].(*basket.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromBasket indicates an expected call of DeleteFromBasket
func (mr *MockBasketClientMockRecorder) DeleteFromBasket(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromBasket", reflect.TypeOf((*MockBasketClient)(nil).DeleteFromBasket), varargs...)
}

// GetBasket mocks base method
func (m *MockBasketClient) GetBasket(arg0 context.Context, arg1 *basket.UID, arg2 ...grpc.CallOption) (*basket.BasketInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBasket", varargs...)
	ret0, _ := ret[0].(*basket.BasketInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBasket indicates an expected call of GetBasket
func (mr *MockBasketClientMockRecorder) GetBasket(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBasket", reflect.TypeOf((*MockBasketClient)(nil).GetBasket), varargs...)
}
