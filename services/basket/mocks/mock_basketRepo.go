// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/borscht/backend/services/basket/repository (interfaces: BasketRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "github.com/borscht/backend/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBasketRepo is a mock of BasketRepo interface
type MockBasketRepo struct {
	ctrl     *gomock.Controller
	recorder *MockBasketRepoMockRecorder
}

// MockBasketRepoMockRecorder is the mock recorder for MockBasketRepo
type MockBasketRepoMockRecorder struct {
	mock *MockBasketRepo
}

// NewMockBasketRepo creates a new mock instance
func NewMockBasketRepo(ctrl *gomock.Controller) *MockBasketRepo {
	mock := &MockBasketRepo{ctrl: ctrl}
	mock.recorder = &MockBasketRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBasketRepo) EXPECT() *MockBasketRepoMockRecorder {
	return m.recorder
}

// AddBasket mocks base method
func (m *MockBasketRepo) AddBasket(arg0 context.Context, arg1, arg2 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBasket", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBasket indicates an expected call of AddBasket
func (mr *MockBasketRepoMockRecorder) AddBasket(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBasket", reflect.TypeOf((*MockBasketRepo)(nil).AddBasket), arg0, arg1, arg2)
}

// AddDishToBasket mocks base method
func (m *MockBasketRepo) AddDishToBasket(arg0 context.Context, arg1 int, arg2 models.DishInBasket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDishToBasket", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDishToBasket indicates an expected call of AddDishToBasket
func (mr *MockBasketRepoMockRecorder) AddDishToBasket(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDishToBasket", reflect.TypeOf((*MockBasketRepo)(nil).AddDishToBasket), arg0, arg1, arg2)
}

// AddToBasket mocks base method
func (m *MockBasketRepo) AddToBasket(arg0 context.Context, arg1 models.DishToBasket, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToBasket", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToBasket indicates an expected call of AddToBasket
func (mr *MockBasketRepoMockRecorder) AddToBasket(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToBasket", reflect.TypeOf((*MockBasketRepo)(nil).AddToBasket), arg0, arg1, arg2)
}

// DeleteBasket mocks base method
func (m *MockBasketRepo) DeleteBasket(arg0 context.Context, arg1, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBasket", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBasket indicates an expected call of DeleteBasket
func (mr *MockBasketRepoMockRecorder) DeleteBasket(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBasket", reflect.TypeOf((*MockBasketRepo)(nil).DeleteBasket), arg0, arg1, arg2)
}

// DeleteFromBasket mocks base method
func (m *MockBasketRepo) DeleteFromBasket(arg0 context.Context, arg1 models.DishToBasket, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromBasket", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFromBasket indicates an expected call of DeleteFromBasket
func (mr *MockBasketRepoMockRecorder) DeleteFromBasket(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromBasket", reflect.TypeOf((*MockBasketRepo)(nil).DeleteFromBasket), arg0, arg1, arg2)
}

// GetAddress mocks base method
func (m *MockBasketRepo) GetAddress(arg0 context.Context, arg1 int) (*models.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress", arg0, arg1)
	ret0, _ := ret[0].(*models.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddress indicates an expected call of GetAddress
func (mr *MockBasketRepoMockRecorder) GetAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockBasketRepo)(nil).GetAddress), arg0, arg1)
}

// GetBasket mocks base method
func (m *MockBasketRepo) GetBasket(arg0 context.Context, arg1 int) (*models.BasketForUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBasket", arg0, arg1)
	ret0, _ := ret[0].(*models.BasketForUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBasket indicates an expected call of GetBasket
func (mr *MockBasketRepoMockRecorder) GetBasket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBasket", reflect.TypeOf((*MockBasketRepo)(nil).GetBasket), arg0, arg1)
}
