// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/borscht/backend/internal/image (interfaces: ImageRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	multipart "mime/multipart"
	reflect "reflect"
)

// MockImageRepo is a mock of ImageRepo interface
type MockImageRepo struct {
	ctrl     *gomock.Controller
	recorder *MockImageRepoMockRecorder
}

// MockImageRepoMockRecorder is the mock recorder for MockImageRepo
type MockImageRepoMockRecorder struct {
	mock *MockImageRepo
}

// NewMockImageRepo creates a new mock instance
func NewMockImageRepo(ctrl *gomock.Controller) *MockImageRepo {
	mock := &MockImageRepo{ctrl: ctrl}
	mock.recorder = &MockImageRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockImageRepo) EXPECT() *MockImageRepoMockRecorder {
	return m.recorder
}

// DeleteImage mocks base method
func (m *MockImageRepo) DeleteImage(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImage indicates an expected call of DeleteImage
func (mr *MockImageRepoMockRecorder) DeleteImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockImageRepo)(nil).DeleteImage), arg0, arg1)
}

// UploadImage mocks base method
func (m *MockImageRepo) UploadImage(arg0 context.Context, arg1 string, arg2 *multipart.FileHeader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadImage", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadImage indicates an expected call of UploadImage
func (mr *MockImageRepoMockRecorder) UploadImage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadImage", reflect.TypeOf((*MockImageRepo)(nil).UploadImage), arg0, arg1, arg2)
}
