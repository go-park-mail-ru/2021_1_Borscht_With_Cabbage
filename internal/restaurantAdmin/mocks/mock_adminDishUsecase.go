// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/borscht/backend/internal/restaurantAdmin (interfaces: AdminDishUsecase)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "github.com/borscht/backend/internal/models"
	gomock "github.com/golang/mock/gomock"
	multipart "mime/multipart"
	reflect "reflect"
)

// MockAdminDishUsecase is a mock of AdminDishUsecase interface
type MockAdminDishUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAdminDishUsecaseMockRecorder
}

// MockAdminDishUsecaseMockRecorder is the mock recorder for MockAdminDishUsecase
type MockAdminDishUsecaseMockRecorder struct {
	mock *MockAdminDishUsecase
}

// NewMockAdminDishUsecase creates a new mock instance
func NewMockAdminDishUsecase(ctrl *gomock.Controller) *MockAdminDishUsecase {
	mock := &MockAdminDishUsecase{ctrl: ctrl}
	mock.recorder = &MockAdminDishUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAdminDishUsecase) EXPECT() *MockAdminDishUsecaseMockRecorder {
	return m.recorder
}

// AddDish mocks base method
func (m *MockAdminDishUsecase) AddDish(arg0 context.Context, arg1 models.Dish) (*models.Dish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDish", arg0, arg1)
	ret0, _ := ret[0].(*models.Dish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDish indicates an expected call of AddDish
func (mr *MockAdminDishUsecaseMockRecorder) AddDish(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDish", reflect.TypeOf((*MockAdminDishUsecase)(nil).AddDish), arg0, arg1)
}

// DeleteDish mocks base method
func (m *MockAdminDishUsecase) DeleteDish(arg0 context.Context, arg1 int) (*models.DeleteSuccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDish", arg0, arg1)
	ret0, _ := ret[0].(*models.DeleteSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDish indicates an expected call of DeleteDish
func (mr *MockAdminDishUsecaseMockRecorder) DeleteDish(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDish", reflect.TypeOf((*MockAdminDishUsecase)(nil).DeleteDish), arg0, arg1)
}

// GetAllDishes mocks base method
func (m *MockAdminDishUsecase) GetAllDishes(arg0 context.Context) ([]models.SectionWithDishes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDishes", arg0)
	ret0, _ := ret[0].([]models.SectionWithDishes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDishes indicates an expected call of GetAllDishes
func (mr *MockAdminDishUsecaseMockRecorder) GetAllDishes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDishes", reflect.TypeOf((*MockAdminDishUsecase)(nil).GetAllDishes), arg0)
}

// UpdateDishData mocks base method
func (m *MockAdminDishUsecase) UpdateDishData(arg0 context.Context, arg1 models.Dish) (*models.Dish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDishData", arg0, arg1)
	ret0, _ := ret[0].(*models.Dish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDishData indicates an expected call of UpdateDishData
func (mr *MockAdminDishUsecaseMockRecorder) UpdateDishData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDishData", reflect.TypeOf((*MockAdminDishUsecase)(nil).UpdateDishData), arg0, arg1)
}

// UploadDishImage mocks base method
func (m *MockAdminDishUsecase) UploadDishImage(arg0 context.Context, arg1 *multipart.FileHeader, arg2 int) (*models.DishImageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadDishImage", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.DishImageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadDishImage indicates an expected call of UploadDishImage
func (mr *MockAdminDishUsecaseMockRecorder) UploadDishImage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadDishImage", reflect.TypeOf((*MockAdminDishUsecase)(nil).UploadDishImage), arg0, arg1, arg2)
}
