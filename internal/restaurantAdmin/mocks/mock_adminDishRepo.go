// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/borscht/backend/internal/restaurantAdmin (interfaces: AdminDishRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "github.com/borscht/backend/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAdminDishRepo is a mock of AdminDishRepo interface
type MockAdminDishRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAdminDishRepoMockRecorder
}

// MockAdminDishRepoMockRecorder is the mock recorder for MockAdminDishRepo
type MockAdminDishRepoMockRecorder struct {
	mock *MockAdminDishRepo
}

// NewMockAdminDishRepo creates a new mock instance
func NewMockAdminDishRepo(ctrl *gomock.Controller) *MockAdminDishRepo {
	mock := &MockAdminDishRepo{ctrl: ctrl}
	mock.recorder = &MockAdminDishRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAdminDishRepo) EXPECT() *MockAdminDishRepoMockRecorder {
	return m.recorder
}

// AddDish mocks base method
func (m *MockAdminDishRepo) AddDish(arg0 context.Context, arg1 models.Dish) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDish", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDish indicates an expected call of AddDish
func (mr *MockAdminDishRepoMockRecorder) AddDish(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDish", reflect.TypeOf((*MockAdminDishRepo)(nil).AddDish), arg0, arg1)
}

// DeleteDish mocks base method
func (m *MockAdminDishRepo) DeleteDish(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDish", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDish indicates an expected call of DeleteDish
func (mr *MockAdminDishRepoMockRecorder) DeleteDish(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDish", reflect.TypeOf((*MockAdminDishRepo)(nil).DeleteDish), arg0, arg1)
}

// GetAllDishes mocks base method
func (m *MockAdminDishRepo) GetAllDishes(arg0 context.Context, arg1 int) ([]models.Dish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDishes", arg0, arg1)
	ret0, _ := ret[0].([]models.Dish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDishes indicates an expected call of GetAllDishes
func (mr *MockAdminDishRepoMockRecorder) GetAllDishes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDishes", reflect.TypeOf((*MockAdminDishRepo)(nil).GetAllDishes), arg0, arg1)
}

// GetDish mocks base method
func (m *MockAdminDishRepo) GetDish(arg0 context.Context, arg1 int) (*models.Dish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDish", arg0, arg1)
	ret0, _ := ret[0].(*models.Dish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDish indicates an expected call of GetDish
func (mr *MockAdminDishRepoMockRecorder) GetDish(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDish", reflect.TypeOf((*MockAdminDishRepo)(nil).GetDish), arg0, arg1)
}

// UpdateDishData mocks base method
func (m *MockAdminDishRepo) UpdateDishData(arg0 context.Context, arg1 models.Dish) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDishData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDishData indicates an expected call of UpdateDishData
func (mr *MockAdminDishRepoMockRecorder) UpdateDishData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDishData", reflect.TypeOf((*MockAdminDishRepo)(nil).UpdateDishData), arg0, arg1)
}

// UpdateDishImage mocks base method
func (m *MockAdminDishRepo) UpdateDishImage(arg0 context.Context, arg1 int, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDishImage", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDishImage indicates an expected call of UpdateDishImage
func (mr *MockAdminDishRepoMockRecorder) UpdateDishImage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDishImage", reflect.TypeOf((*MockAdminDishRepo)(nil).UpdateDishImage), arg0, arg1, arg2)
}
