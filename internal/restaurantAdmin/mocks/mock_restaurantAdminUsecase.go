// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/borscht/backend/internal/restaurantAdmin (interfaces: AdminRestaurantUsecase)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "github.com/borscht/backend/internal/models"
	gomock "github.com/golang/mock/gomock"
	multipart "mime/multipart"
	reflect "reflect"
)

// MockAdminRestaurantUsecase is a mock of AdminRestaurantUsecase interface
type MockAdminRestaurantUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAdminRestaurantUsecaseMockRecorder
}

// MockAdminRestaurantUsecaseMockRecorder is the mock recorder for MockAdminRestaurantUsecase
type MockAdminRestaurantUsecaseMockRecorder struct {
	mock *MockAdminRestaurantUsecase
}

// NewMockAdminRestaurantUsecase creates a new mock instance
func NewMockAdminRestaurantUsecase(ctrl *gomock.Controller) *MockAdminRestaurantUsecase {
	mock := &MockAdminRestaurantUsecase{ctrl: ctrl}
	mock.recorder = &MockAdminRestaurantUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAdminRestaurantUsecase) EXPECT() *MockAdminRestaurantUsecaseMockRecorder {
	return m.recorder
}

// AddAddress mocks base method
func (m *MockAdminRestaurantUsecase) AddAddress(arg0 context.Context, arg1 int, arg2 models.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAddress", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAddress indicates an expected call of AddAddress
func (mr *MockAdminRestaurantUsecaseMockRecorder) AddAddress(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockAdminRestaurantUsecase)(nil).AddAddress), arg0, arg1, arg2)
}

// AddCategories mocks base method
func (m *MockAdminRestaurantUsecase) AddCategories(arg0 context.Context, arg1 models.Categories) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCategories", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCategories indicates an expected call of AddCategories
func (mr *MockAdminRestaurantUsecaseMockRecorder) AddCategories(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCategories", reflect.TypeOf((*MockAdminRestaurantUsecase)(nil).AddCategories), arg0, arg1)
}

// UpdateRestaurantData mocks base method
func (m *MockAdminRestaurantUsecase) UpdateRestaurantData(arg0 context.Context, arg1 models.RestaurantUpdateData) (*models.SuccessRestaurantResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRestaurantData", arg0, arg1)
	ret0, _ := ret[0].(*models.SuccessRestaurantResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRestaurantData indicates an expected call of UpdateRestaurantData
func (mr *MockAdminRestaurantUsecaseMockRecorder) UpdateRestaurantData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRestaurantData", reflect.TypeOf((*MockAdminRestaurantUsecase)(nil).UpdateRestaurantData), arg0, arg1)
}

// UploadRestaurantImage mocks base method
func (m *MockAdminRestaurantUsecase) UploadRestaurantImage(arg0 context.Context, arg1 *multipart.FileHeader) (*models.RestaurantImageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadRestaurantImage", arg0, arg1)
	ret0, _ := ret[0].(*models.RestaurantImageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadRestaurantImage indicates an expected call of UploadRestaurantImage
func (mr *MockAdminRestaurantUsecaseMockRecorder) UploadRestaurantImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadRestaurantImage", reflect.TypeOf((*MockAdminRestaurantUsecase)(nil).UploadRestaurantImage), arg0, arg1)
}
