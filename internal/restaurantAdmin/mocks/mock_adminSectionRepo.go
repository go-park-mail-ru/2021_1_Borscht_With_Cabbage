// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/borscht/backend/internal/restaurantAdmin (interfaces: AdminSectionRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "github.com/borscht/backend/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAdminSectionRepo is a mock of AdminSectionRepo interface
type MockAdminSectionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAdminSectionRepoMockRecorder
}

// MockAdminSectionRepoMockRecorder is the mock recorder for MockAdminSectionRepo
type MockAdminSectionRepoMockRecorder struct {
	mock *MockAdminSectionRepo
}

// NewMockAdminSectionRepo creates a new mock instance
func NewMockAdminSectionRepo(ctrl *gomock.Controller) *MockAdminSectionRepo {
	mock := &MockAdminSectionRepo{ctrl: ctrl}
	mock.recorder = &MockAdminSectionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAdminSectionRepo) EXPECT() *MockAdminSectionRepoMockRecorder {
	return m.recorder
}

// AddSection mocks base method
func (m *MockAdminSectionRepo) AddSection(arg0 context.Context, arg1 models.Section) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSection", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSection indicates an expected call of AddSection
func (mr *MockAdminSectionRepoMockRecorder) AddSection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSection", reflect.TypeOf((*MockAdminSectionRepo)(nil).AddSection), arg0, arg1)
}

// DeleteSection mocks base method
func (m *MockAdminSectionRepo) DeleteSection(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSection", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSection indicates an expected call of DeleteSection
func (mr *MockAdminSectionRepoMockRecorder) DeleteSection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSection", reflect.TypeOf((*MockAdminSectionRepo)(nil).DeleteSection), arg0, arg1)
}

// GetAllSections mocks base method
func (m *MockAdminSectionRepo) GetAllSections(arg0 context.Context, arg1 int) ([]models.Section, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSections", arg0, arg1)
	ret0, _ := ret[0].([]models.Section)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSections indicates an expected call of GetAllSections
func (mr *MockAdminSectionRepoMockRecorder) GetAllSections(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSections", reflect.TypeOf((*MockAdminSectionRepo)(nil).GetAllSections), arg0, arg1)
}

// GetSection mocks base method
func (m *MockAdminSectionRepo) GetSection(arg0 context.Context, arg1 int) (*models.Section, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSection", arg0, arg1)
	ret0, _ := ret[0].(*models.Section)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSection indicates an expected call of GetSection
func (mr *MockAdminSectionRepoMockRecorder) GetSection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSection", reflect.TypeOf((*MockAdminSectionRepo)(nil).GetSection), arg0, arg1)
}

// UpdateSection mocks base method
func (m *MockAdminSectionRepo) UpdateSection(arg0 context.Context, arg1 models.Section) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSection", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSection indicates an expected call of UpdateSection
func (mr *MockAdminSectionRepoMockRecorder) UpdateSection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSection", reflect.TypeOf((*MockAdminSectionRepo)(nil).UpdateSection), arg0, arg1)
}
