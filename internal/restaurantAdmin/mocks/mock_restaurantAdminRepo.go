// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/borscht/backend/internal/restaurantAdmin (interfaces: AdminRestaurantRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "github.com/borscht/backend/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAdminRestaurantRepo is a mock of AdminRestaurantRepo interface
type MockAdminRestaurantRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAdminRestaurantRepoMockRecorder
}

// MockAdminRestaurantRepoMockRecorder is the mock recorder for MockAdminRestaurantRepo
type MockAdminRestaurantRepoMockRecorder struct {
	mock *MockAdminRestaurantRepo
}

// NewMockAdminRestaurantRepo creates a new mock instance
func NewMockAdminRestaurantRepo(ctrl *gomock.Controller) *MockAdminRestaurantRepo {
	mock := &MockAdminRestaurantRepo{ctrl: ctrl}
	mock.recorder = &MockAdminRestaurantRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAdminRestaurantRepo) EXPECT() *MockAdminRestaurantRepoMockRecorder {
	return m.recorder
}

// AddAddress mocks base method
func (m *MockAdminRestaurantRepo) AddAddress(arg0 context.Context, arg1 int, arg2 models.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAddress", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAddress indicates an expected call of AddAddress
func (mr *MockAdminRestaurantRepoMockRecorder) AddAddress(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockAdminRestaurantRepo)(nil).AddAddress), arg0, arg1, arg2)
}

// AddCategories mocks base method
func (m *MockAdminRestaurantRepo) AddCategories(arg0 context.Context, arg1 int, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCategories", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCategories indicates an expected call of AddCategories
func (mr *MockAdminRestaurantRepoMockRecorder) AddCategories(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCategories", reflect.TypeOf((*MockAdminRestaurantRepo)(nil).AddCategories), arg0, arg1, arg2)
}

// DeleteAllCategories mocks base method
func (m *MockAdminRestaurantRepo) DeleteAllCategories(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllCategories", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllCategories indicates an expected call of DeleteAllCategories
func (mr *MockAdminRestaurantRepoMockRecorder) DeleteAllCategories(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllCategories", reflect.TypeOf((*MockAdminRestaurantRepo)(nil).DeleteAllCategories), arg0, arg1)
}

// GetAddress mocks base method
func (m *MockAdminRestaurantRepo) GetAddress(arg0 context.Context, arg1 int) (*models.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress", arg0, arg1)
	ret0, _ := ret[0].(*models.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddress indicates an expected call of GetAddress
func (mr *MockAdminRestaurantRepoMockRecorder) GetAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockAdminRestaurantRepo)(nil).GetAddress), arg0, arg1)
}

// GetCategories mocks base method
func (m *MockAdminRestaurantRepo) GetCategories(arg0 context.Context, arg1 int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategories", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategories indicates an expected call of GetCategories
func (mr *MockAdminRestaurantRepoMockRecorder) GetCategories(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategories", reflect.TypeOf((*MockAdminRestaurantRepo)(nil).GetCategories), arg0, arg1)
}

// UpdateAddress mocks base method
func (m *MockAdminRestaurantRepo) UpdateAddress(arg0 context.Context, arg1 int, arg2 models.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddress", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAddress indicates an expected call of UpdateAddress
func (mr *MockAdminRestaurantRepoMockRecorder) UpdateAddress(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddress", reflect.TypeOf((*MockAdminRestaurantRepo)(nil).UpdateAddress), arg0, arg1, arg2)
}

// UpdateRestaurantData mocks base method
func (m *MockAdminRestaurantRepo) UpdateRestaurantData(arg0 context.Context, arg1 models.RestaurantUpdateData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRestaurantData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRestaurantData indicates an expected call of UpdateRestaurantData
func (mr *MockAdminRestaurantRepoMockRecorder) UpdateRestaurantData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRestaurantData", reflect.TypeOf((*MockAdminRestaurantRepo)(nil).UpdateRestaurantData), arg0, arg1)
}

// UpdateRestaurantImage mocks base method
func (m *MockAdminRestaurantRepo) UpdateRestaurantImage(arg0 context.Context, arg1 int, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRestaurantImage", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRestaurantImage indicates an expected call of UpdateRestaurantImage
func (mr *MockAdminRestaurantRepoMockRecorder) UpdateRestaurantImage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRestaurantImage", reflect.TypeOf((*MockAdminRestaurantRepo)(nil).UpdateRestaurantImage), arg0, arg1, arg2)
}
