// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/borscht/backend/internal/restaurant (interfaces: RestaurantHandler)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	v4 "github.com/labstack/echo/v4"
	reflect "reflect"
)

// MockRestaurantHandler is a mock of RestaurantHandler interface
type MockRestaurantHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRestaurantHandlerMockRecorder
}

// MockRestaurantHandlerMockRecorder is the mock recorder for MockRestaurantHandler
type MockRestaurantHandlerMockRecorder struct {
	mock *MockRestaurantHandler
}

// NewMockRestaurantHandler creates a new mock instance
func NewMockRestaurantHandler(ctrl *gomock.Controller) *MockRestaurantHandler {
	mock := &MockRestaurantHandler{ctrl: ctrl}
	mock.recorder = &MockRestaurantHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRestaurantHandler) EXPECT() *MockRestaurantHandlerMockRecorder {
	return m.recorder
}

// GetRestaurantPage mocks base method
func (m *MockRestaurantHandler) GetRestaurantPage(arg0 v4.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestaurantPage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetRestaurantPage indicates an expected call of GetRestaurantPage
func (mr *MockRestaurantHandlerMockRecorder) GetRestaurantPage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestaurantPage", reflect.TypeOf((*MockRestaurantHandler)(nil).GetRestaurantPage), arg0)
}

// GetVendor mocks base method
func (m *MockRestaurantHandler) GetVendor(arg0 v4.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVendor", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetVendor indicates an expected call of GetVendor
func (mr *MockRestaurantHandlerMockRecorder) GetVendor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVendor", reflect.TypeOf((*MockRestaurantHandler)(nil).GetVendor), arg0)
}
