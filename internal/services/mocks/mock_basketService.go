// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/borscht/backend/internal/services/basket (interfaces: ServiceBasket)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "github.com/borscht/backend/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockServiceBasket is a mock of ServiceBasket interface
type MockServiceBasket struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBasketMockRecorder
}

// MockServiceBasketMockRecorder is the mock recorder for MockServiceBasket
type MockServiceBasketMockRecorder struct {
	mock *MockServiceBasket
}

// NewMockServiceBasket creates a new mock instance
func NewMockServiceBasket(ctrl *gomock.Controller) *MockServiceBasket {
	mock := &MockServiceBasket{ctrl: ctrl}
	mock.recorder = &MockServiceBasketMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceBasket) EXPECT() *MockServiceBasketMockRecorder {
	return m.recorder
}

// AddBasket mocks base method
func (m *MockServiceBasket) AddBasket(arg0 context.Context, arg1 models.BasketForUser) (*models.BasketForUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBasket", arg0, arg1)
	ret0, _ := ret[0].(*models.BasketForUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBasket indicates an expected call of AddBasket
func (mr *MockServiceBasketMockRecorder) AddBasket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBasket", reflect.TypeOf((*MockServiceBasket)(nil).AddBasket), arg0, arg1)
}

// AddToBasket mocks base method
func (m *MockServiceBasket) AddToBasket(arg0 context.Context, arg1 models.DishToBasket, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToBasket", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToBasket indicates an expected call of AddToBasket
func (mr *MockServiceBasketMockRecorder) AddToBasket(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToBasket", reflect.TypeOf((*MockServiceBasket)(nil).AddToBasket), arg0, arg1, arg2)
}

// DeleteFromBasket mocks base method
func (m *MockServiceBasket) DeleteFromBasket(arg0 context.Context, arg1 models.DishToBasket, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromBasket", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFromBasket indicates an expected call of DeleteFromBasket
func (mr *MockServiceBasketMockRecorder) DeleteFromBasket(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromBasket", reflect.TypeOf((*MockServiceBasket)(nil).DeleteFromBasket), arg0, arg1, arg2)
}

// GetBasket mocks base method
func (m *MockServiceBasket) GetBasket(arg0 context.Context, arg1 int) (*models.BasketForUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBasket", arg0, arg1)
	ret0, _ := ret[0].(*models.BasketForUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBasket indicates an expected call of GetBasket
func (mr *MockServiceBasketMockRecorder) GetBasket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBasket", reflect.TypeOf((*MockServiceBasket)(nil).GetBasket), arg0, arg1)
}
