// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/borscht/backend/internal/services/auth (interfaces: ServiceAuth)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "github.com/borscht/backend/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockServiceAuth is a mock of ServiceAuth interface
type MockServiceAuth struct {
	ctrl     *gomock.Controller
	recorder *MockServiceAuthMockRecorder
}

// MockServiceAuthMockRecorder is the mock recorder for MockServiceAuth
type MockServiceAuthMockRecorder struct {
	mock *MockServiceAuth
}

// NewMockServiceAuth creates a new mock instance
func NewMockServiceAuth(ctrl *gomock.Controller) *MockServiceAuth {
	mock := &MockServiceAuth{ctrl: ctrl}
	mock.recorder = &MockServiceAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceAuth) EXPECT() *MockServiceAuthMockRecorder {
	return m.recorder
}

// CheckKey mocks base method
func (m *MockServiceAuth) CheckKey(arg0 context.Context, arg1 string) (models.SessionInfo, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckKey", arg0, arg1)
	ret0, _ := ret[0].(models.SessionInfo)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckKey indicates an expected call of CheckKey
func (mr *MockServiceAuthMockRecorder) CheckKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckKey", reflect.TypeOf((*MockServiceAuth)(nil).CheckKey), arg0, arg1)
}

// CheckRestaurantExists mocks base method
func (m *MockServiceAuth) CheckRestaurantExists(arg0 context.Context, arg1 models.RestaurantAuth) (*models.SuccessRestaurantResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRestaurantExists", arg0, arg1)
	ret0, _ := ret[0].(*models.SuccessRestaurantResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRestaurantExists indicates an expected call of CheckRestaurantExists
func (mr *MockServiceAuthMockRecorder) CheckRestaurantExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRestaurantExists", reflect.TypeOf((*MockServiceAuth)(nil).CheckRestaurantExists), arg0, arg1)
}

// CheckSession mocks base method
func (m *MockServiceAuth) CheckSession(arg0 context.Context, arg1 string) (models.SessionInfo, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSession", arg0, arg1)
	ret0, _ := ret[0].(models.SessionInfo)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckSession indicates an expected call of CheckSession
func (mr *MockServiceAuthMockRecorder) CheckSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSession", reflect.TypeOf((*MockServiceAuth)(nil).CheckSession), arg0, arg1)
}

// CheckUserExists mocks base method
func (m *MockServiceAuth) CheckUserExists(arg0 context.Context, arg1 models.UserAuth) (*models.SuccessUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserExists", arg0, arg1)
	ret0, _ := ret[0].(*models.SuccessUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserExists indicates an expected call of CheckUserExists
func (mr *MockServiceAuthMockRecorder) CheckUserExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserExists", reflect.TypeOf((*MockServiceAuth)(nil).CheckUserExists), arg0, arg1)
}

// Create mocks base method
func (m *MockServiceAuth) Create(arg0 context.Context, arg1 models.User) (*models.SuccessUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*models.SuccessUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockServiceAuthMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockServiceAuth)(nil).Create), arg0, arg1)
}

// CreateKey mocks base method
func (m *MockServiceAuth) CreateKey(arg0 context.Context, arg1 models.SessionInfo) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKey", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKey indicates an expected call of CreateKey
func (mr *MockServiceAuthMockRecorder) CreateKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKey", reflect.TypeOf((*MockServiceAuth)(nil).CreateKey), arg0, arg1)
}

// CreateRestaurant mocks base method
func (m *MockServiceAuth) CreateRestaurant(arg0 context.Context, arg1 models.RestaurantInfo) (*models.SuccessRestaurantResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRestaurant", arg0, arg1)
	ret0, _ := ret[0].(*models.SuccessRestaurantResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRestaurant indicates an expected call of CreateRestaurant
func (mr *MockServiceAuthMockRecorder) CreateRestaurant(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRestaurant", reflect.TypeOf((*MockServiceAuth)(nil).CreateRestaurant), arg0, arg1)
}

// CreateSession mocks base method
func (m *MockServiceAuth) CreateSession(arg0 context.Context, arg1 models.SessionInfo) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession
func (mr *MockServiceAuthMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockServiceAuth)(nil).CreateSession), arg0, arg1)
}

// DeleteSession mocks base method
func (m *MockServiceAuth) DeleteSession(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession
func (mr *MockServiceAuthMockRecorder) DeleteSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockServiceAuth)(nil).DeleteSession), arg0, arg1)
}

// GetByRid mocks base method
func (m *MockServiceAuth) GetByRid(arg0 context.Context, arg1 int) (*models.SuccessRestaurantResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByRid", arg0, arg1)
	ret0, _ := ret[0].(*models.SuccessRestaurantResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRid indicates an expected call of GetByRid
func (mr *MockServiceAuthMockRecorder) GetByRid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRid", reflect.TypeOf((*MockServiceAuth)(nil).GetByRid), arg0, arg1)
}

// GetByUid mocks base method
func (m *MockServiceAuth) GetByUid(arg0 context.Context, arg1 int) (*models.SuccessUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUid", arg0, arg1)
	ret0, _ := ret[0].(*models.SuccessUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUid indicates an expected call of GetByUid
func (mr *MockServiceAuthMockRecorder) GetByUid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUid", reflect.TypeOf((*MockServiceAuth)(nil).GetByUid), arg0, arg1)
}
