// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/borscht/backend/internal/services/chat (interfaces: ServiceChat)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "github.com/borscht/backend/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockServiceChat is a mock of ServiceChat interface
type MockServiceChat struct {
	ctrl     *gomock.Controller
	recorder *MockServiceChatMockRecorder
}

// MockServiceChatMockRecorder is the mock recorder for MockServiceChat
type MockServiceChatMockRecorder struct {
	mock *MockServiceChat
}

// NewMockServiceChat creates a new mock instance
func NewMockServiceChat(ctrl *gomock.Controller) *MockServiceChat {
	mock := &MockServiceChat{ctrl: ctrl}
	mock.recorder = &MockServiceChatMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceChat) EXPECT() *MockServiceChatMockRecorder {
	return m.recorder
}

// GetAllChats mocks base method
func (m *MockServiceChat) GetAllChats(arg0 context.Context, arg1 models.ChatUser) ([]models.InfoChatMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllChats", arg0, arg1)
	ret0, _ := ret[0].([]models.InfoChatMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllChats indicates an expected call of GetAllChats
func (mr *MockServiceChatMockRecorder) GetAllChats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllChats", reflect.TypeOf((*MockServiceChat)(nil).GetAllChats), arg0, arg1)
}

// GetAllMessages mocks base method
func (m *MockServiceChat) GetAllMessages(arg0 context.Context, arg1, arg2 models.ChatUser) ([]models.InfoChatMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMessages", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.InfoChatMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMessages indicates an expected call of GetAllMessages
func (mr *MockServiceChatMockRecorder) GetAllMessages(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMessages", reflect.TypeOf((*MockServiceChat)(nil).GetAllMessages), arg0, arg1, arg2)
}

// ProcessMessage mocks base method
func (m *MockServiceChat) ProcessMessage(arg0 context.Context, arg1 models.InfoChatMessage) (models.InfoChatMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessMessage", arg0, arg1)
	ret0, _ := ret[0].(models.InfoChatMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessMessage indicates an expected call of ProcessMessage
func (mr *MockServiceChatMockRecorder) ProcessMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessMessage", reflect.TypeOf((*MockServiceChat)(nil).ProcessMessage), arg0, arg1)
}
